# -*- coding: utf-8 -*-
"""Biometrics Project code

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n6dy7oEfIVERAN446NlzRJpK9NGlOaz7
"""

import zipfile
import os


zip_file_path = "/content/dataa.zip"
extracted_folder_path = "/content/dataa"

with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    zip_ref.extractall(extracted_folder_path)

print(f"ZIP file extracted to: {extracted_folder_path}")


for root, dirs, files in os.walk(extracted_folder_path):
    print(f"Directory: {root}")
    for file in files:
        print(f"  File: {file}")

class DataGenerator(Sequence):
    def __init__(self, folder_path, batch_size=32, img_size=(64, 64)):
        self.batch_size = batch_size
        self.img_size = img_size
        self.files = []
        for root, dirs, files in os.walk(folder_path):
            for filename in files:

                if not filename.startswith("._") and filename.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.tiff')):
                    self.files.append(os.path.join(root, filename))

    def __len__(self):
        return int(np.ceil(len(self.files) / self.batch_size))

    def __getitem__(self, index):
        batch_files = self.files[index * self.batch_size:(index + 1) * self.batch_size]
        images = []
        for file in batch_files:
            img = cv2.imread(file, cv2.IMREAD_GRAYSCALE)
            if img is not None:
                img = cv2.resize(img, self.img_size)
                images.append(img)
        images = np.array(images)
        images = np.expand_dims(images, axis=-1)
        images = images / 127.5 - 1.0
        return images

dataset_path = "/content/dataa/dataa"
data_generator = DataGenerator(dataset_path, batch_size=32)

print(f"Number of images found: {len(data_generator.files)}")

if len(data_generator.files) > 0:
    test_batch = data_generator.__getitem__(0)
    print(f"Loaded batch shape: {test_batch.shape}")
else:
    print("No valid images found!")

train_gan(generator, discriminator, gan, data_generator, epochs=5000, batch_size=32, save_interval=500)

from google.colab import files
!zip -r generated_images.zip generated_images/
files.download("generated_images.zip")

from sklearn.metrics import classification_report
import numpy as np

def evaluate_discriminator(discriminator, data_generator, generator, batch_size=32):

    real_imgs = data_generator.__getitem__(np.random.randint(0, len(data_generator)))
    real_imgs = real_imgs[:batch_size]
    real_labels = np.ones((real_imgs.shape[0], 1))

    noise = np.random.normal(0, 1, (batch_size, 100))
    fake_imgs = generator.predict(noise)
    fake_labels = np.zeros((fake_imgs.shape[0], 1))


    combined_imgs = np.vstack((real_imgs, fake_imgs))
    combined_labels = np.vstack((real_labels, fake_labels))


    predictions = discriminator.predict(combined_imgs)
    predicted_labels = (predictions > 0.5).astype(int)


    report = classification_report(combined_labels, predicted_labels, target_names=['Real', 'Fake'])
    print(report)
    return report


classification_report = evaluate_discriminator(discriminator, data_generator, generator, batch_size=32)

from sklearn.metrics import classification_report
import matplotlib.pyplot as plt
import numpy as np


def evaluate_generator(generator, discriminator, data_generator, batch_size=32):

    noise = np.random.normal(0, 1, (batch_size, 100))
    fake_imgs = generator.predict(noise)


    predictions = discriminator.predict(fake_imgs)


    predicted_labels = (predictions > 0.5).astype(int)


    true_labels = np.zeros((batch_size, 1))


    report = classification_report(true_labels, predicted_labels, labels=[0, 1], target_names=['Fake', 'Real'])

    print("Generator Performance:")
    print(report)


    visualize_generated_images(fake_imgs)


def visualize_generated_images(generated_images, examples=5, image_dim=(64, 64)):
    generated_images = 0.5 * generated_images + 0.5
    for i in range(examples):
        plt.subplot(1, examples, i + 1)
        plt.imshow(generated_images[i].reshape(image_dim), cmap='gray')
        plt.axis('off')
    plt.show()


evaluate_generator(generator, discriminator, data_generator, batch_size=32)